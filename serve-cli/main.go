// Code generated by cligen. DO NOT EDIT.
package main

import (
	"fmt"
	"os"
	"strings"

	"github.com/spf13/pflag"
)

// ServeCommand represents the serve command
type ServeCommand struct {
	Port int
	Env string
	
}

// Execute runs the serve command
func (c *ServeCommand) Execute() error {
	// TODO: Implement your command logic here
	fmt.Printf("Executing serve command with args: %+v\n", c)
	return nil
}

// NewServeCommand creates and configures the serve command
func NewServeCommand() *ServeCommand {
	cmd := &ServeCommand{}
	
	// Define flags
	pflag.IntVarP(&cmd.Port, "port", "p", 8080, "port")
	pflag.StringVarP(&cmd.Env, "env", "e", "", "env (required) [dev|staging|prod|local]")
	
	
	// Parse flags
	pflag.Parse()
	
	// Validate required fields
	if cmd.Env == "" {
		fmt.Fprintf(os.Stderr, "Error: --%s is required\n", "env")
		pflag.Usage()
		os.Exit(1)
	}
	
	
	// Validate options
	if cmd.Env != "" {
		validOptions := []string{ "dev", "staging", "prod", "local",  }
		valid := false
		for _, opt := range validOptions {
			if cmd.Env == opt {
				valid = true
				break
			}
		}
		if !valid {
			fmt.Fprintf(os.Stderr, "Error: --%s must be one of: %s\n", "env", strings.Join(validOptions, ", "))
			pflag.Usage()
			os.Exit(1)
		}
	}
	
	
	return cmd
}

func main() {
	// Check for help flags
	if len(os.Args) > 1 && (os.Args[1] == "--help" || os.Args[1] == "-h") {
		fmt.Println("Starts an HTTP server")
		fmt.Println()
		pflag.Usage()
		return
	}
	
	cmd := NewServeCommand()
	if err := cmd.Execute(); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}
